// =========================================================
// grid size config
// =========================================================

$column:     60px  !default; // column-width of your grid in pixels
$gutter:     20px  !default; // gutter-width of your grid in pixels
$columns:    16    !default; // maximum number of columns needed for layout
$fixed-grid: 4     !default; // number of columns to trigger fixed grid
$ie-support: false !default; // number of columns for vintage ie

// =========================================================
// utility functions
// =========================================================

// function for converting px to em
@function em($px, $base: 16px) { @return (($px / $base) * 1em); }

// column width functions
@function col($col:1) { @return (($col * (em($column) + em($gutter)) - em($gutter))) }

// =========================================================
// mobile first fluid layout
// =========================================================

// container class should only be applied to full width elements
// col class should be applied to every immediate child in a container
.container { width: auto; margin-left: em($gutter); margin-right: em($gutter); @include clearfix; }
.col { float: none; margin-left: 0; width: auto; } // is this necessary?

// =========================================================
// create media query break point based on columns (private)
// =========================================================

// second argument sets a width in columns for the selector
// third argument passes styles to the media query for that selector
@mixin set-bp($bp, $width: false, $content: false) {
	@for $i from 1 through $columns {	 
		@if ($bp == $i) {
		
			@media (min-width: (col($i) + (em($gutter) * 2))) {
				@if ($width) { width: col($width); }
				@if ($content) { @content }
			}

			// ie fallback			
			@if ($ie-support == $bp) {
				@if ($width) { @include no-mediaquery { width: col($width); } }
				@if ($content) { @include no-mediaquery { @content } }
			}
		}
	}	 
}

// =========================================================
// switch from fluid to fixed grid (private)
// =========================================================

// break point to turn off fluid and go fixed grid (must be fired without a selector on the root)
@mixin set-fixed-bp($bp) {
	@include set-bp($bp, $content: true) {
		.container { margin-left: auto; margin-right: auto; width: col($bp); }
		.col { float: left; margin-left: em($gutter); &:first-child { margin-left: 0; } }
	}
	
	// ie fallback			
	@if ($ie-support) {
		@include no-mediaquery { .container { width: col($ie-support); margin-left: auto; margin-right: auto; } }
		@include no-mediaquery { .col { float: left; margin-left: em($gutter); &:first-child { margin-left: 0; } } }
	}
}

// fire fixed grid from variable
@if ($fixed-grid) {
	@include set-fixed-bp($fixed-grid);
}

// =========================================================
// sandbox a set of styles between two breakpoints (private)
// =========================================================

@mixin set-sandbox-bp($min, $max) {
	@media (min-width: (col($min) + (em($gutter) * 2))) and (max-width: (col($max) + (em($gutter) * 2))) { @content }
	
	// ie fallback
	@if ($ie-support) {
		@if ($ie-support >= $min ) { 
			@if ($ie-support <= $max) {
				@include no-mediaquery { @content }
			}
		}	
	}
}

// =========================================================
// breakpoint mixin (public)
// =========================================================

@mixin breakpoint($col, $sandbox: false) {
	@if ($sandbox) {
		@include set-sandbox-bp($col, $sandbox) { @content }
	} @else {
		@include set-bp($col, $content: true) { @content }	
	}
}

// =========================================================
// global size adjust (public)
// =========================================================

@mixin bump($factor) {
	body { font-size: ($factor * 2 + 16) / 16 * 1em; }
}

