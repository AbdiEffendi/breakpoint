// Default 940px grid
$gridColumns:             12 !default;
$gridColumnWidth:         em(60px) !default;
$gridGutterWidth:         em(20px) !default;
$gridRowWidth:            ($gridColumns * $gridColumnWidth) + ($gridGutterWidth * ($gridColumns - 1));

// Fluid grid
$fluidGrid:               true !default;
$fluidGridColumnWidth:    6.382978723% !default;
$fluidGridGutterWidth:    2.127659574% !default;

// Le grid system
@mixin gridSystem-columns ($gridGutterWidth, $gridColumnWidth, $gridRowWidth, $columns) {
	width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
} 
@mixin gridSystem-offset($gridColumnWidth, $gridGutterWidth, $columns) {
	margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1)) + ($gridGutterWidth * 2);
}
@mixin gridSystem-gridColumn($gridGutterWidth) { float: left; margin-left: $gridGutterWidth; }

// Use makeRow and makeColumn to assign semantic layouts grid system behavior
@mixin makeRow() { margin-left: $gridGutterWidth * -1; @extend .clearfix; }
@mixin makeColumn($columns: 1) { float: left; margin-left: $gridGutterWidth; width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1)); }

// Take these values and mixins, and make 'em do their thang
@mixin gridSystem-generate($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  // Row surrounds the columns
  .row { margin-left: $gridGutterWidth * -1; @extend .clearfix; }
  // Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks $dhg)
  [class*="span"] { @include gridSystem-gridColumn($gridGutterWidth); }
  // Default columns
  .span1     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 1); }
  .span2     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 2); }
  .span3     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 3); }
  .span4     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 4); }
  .span5     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 5); }
  .span6     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 6); }
  .span7     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 7); }
  .span8     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 8); }
  .span9     { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 9); }
  .span10    { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 10); }
  .span11    { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 11); }
  .span12,
  .container { @include gridSystem-columns($gridGutterWidth, $gridColumnWidth, $gridRowWidth, 12); }
  // Offset column options
  .offset1   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 1); }
  .offset2   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 2); }
  .offset3   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 3); }
  .offset4   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 4); }
  .offset5   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 5); }
  .offset6   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 6); }
  .offset7   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 7); }
  .offset8   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 8); }
  .offset9   { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 9); }
  .offset10  { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 10); }
  .offset11  { @include gridSystem-offset($gridColumnWidth, $gridGutterWidth, 11); }
}

// Fluid grid system
@mixin fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, $columns) {
  width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
}
@mixin fluidGridSystem-gridColumn($fluidGridGutterWidth) { float: left; margin-left: $fluidGridGutterWidth; }
// Take these values and mixins, and make 'em do their thang
@mixin fluidGridSystem-generate($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {      
  // Row surrounds the columns
  .row-fluid {
    width: 100%; @extend .clearfix;
    // Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks $dhg)
    > [class*="span"] { @include fluidGridSystem-gridColumn($fluidGridGutterWidth); }
    > [class*="span"]:first-child { margin-left: 0; }
    // Default columns
    > .span1     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 1); }
    > .span2     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 2); }
    > .span3     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 3); }
    > .span4     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 4); }
    > .span5     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 5); }
    > .span6     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 6); }
    > .span7     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 7); }
    > .span8     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 8); }
    > .span9     { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 9); }
    > .span10    { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 10); }
    > .span11    { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 11); }
    > .span12    { @include fluidGridSystem-columns($fluidGridGutterWidth, $fluidGridColumnWidth, 12); }
  }
}